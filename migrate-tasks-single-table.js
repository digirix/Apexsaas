/**
 * Migration script to consolidate auto-generated tasks into the main tasks table
 * This implements a single-table approach where all tasks (both regular and auto-generated)
 * are stored in the same 'tasks' table with flags to differentiate them.
 */

const { db, tasks, autoGeneratedTasks } = require('./server/db');
const { eq, and, isNull } = require('drizzle-orm');
const { format } = require('date-fns');

/**
 * Calculate compliance period based on frequency and start date
 */
function calculateCompliancePeriod(frequency, startDate) {
  if (!frequency || !startDate) {
    return "";
  }

  const frequencyLower = frequency.toLowerCase();
  
  // Monthly format: "May 2025"
  if (frequencyLower.includes('month')) {
    return format(startDate, 'MMMM yyyy');
  } 
  // Quarterly format: "Q2 2025"
  else if (frequencyLower.includes('quarter')) {
    const quarter = Math.floor(startDate.getMonth() / 3) + 1;
    return `Q${quarter} ${startDate.getFullYear()}`;
  } 
  // Annual or yearly formats
  else if (frequencyLower.includes('annual') || frequencyLower.includes('year')) {
    if (frequencyLower.includes('5')) {
      const startYear = startDate.getFullYear();
      return `${startYear}-${startYear + 4}`;
    } else if (frequencyLower.includes('4')) {
      const startYear = startDate.getFullYear();
      return `${startYear}-${startYear + 3}`;
    } else if (frequencyLower.includes('3')) {
      const startYear = startDate.getFullYear();
      return `${startYear}-${startYear + 2}`;
    } else if (frequencyLower.includes('2')) {
      const startYear = startDate.getFullYear();
      return `${startYear}-${startYear + 1}`;
    } else {
      return `${startDate.getFullYear()}`;
    }
  } 
  // Semi-annual format: "H1 2025" or "H2 2025"
  else if (frequencyLower.includes('semi') || frequencyLower.includes('bi-annual')) {
    const half = startDate.getMonth() < 6 ? 1 : 2;
    return `H${half} ${startDate.getFullYear()}`;
  } 
  // One-time format: "May 2025 (One-time)"
  else if (frequencyLower.includes('one time') || frequencyLower.includes('once')) {
    return `${format(startDate, 'MMMM yyyy')} (One-time)`;
  } 
  // Default format
  else {
    return format(startDate, 'MMMM yyyy');
  }
}

/**
 * Migrate auto-generated tasks to the main tasks table
 */
async function migrateAutoGeneratedTasks() {
  try {
    console.log('Starting migration of auto-generated tasks to the main tasks table...');
    
    // Get all auto-generated tasks
    const autoTasks = await db.select().from(autoGeneratedTasks);
    console.log(`Found ${autoTasks.length} auto-generated tasks to migrate`);
    
    // Migrate each task to the main tasks table with proper flags
    for (const task of autoTasks) {
      // Calculate compliance period if needed
      let compliancePeriod = task.compliancePeriod;
      if (!compliancePeriod && task.complianceStartDate && task.complianceFrequency) {
        compliancePeriod = calculateCompliancePeriod(
          task.complianceFrequency,
          new Date(task.complianceStartDate)
        );
      }
      
      // Insert into the main tasks table
      await db.insert(tasks).values({
        id: task.id, // Use the same ID if possible
        tenantId: task.tenantId,
        isAdmin: task.isAdmin,
        taskType: task.taskType,
        clientId: task.clientId,
        entityId: task.entityId,
        serviceTypeId: task.serviceTypeId,
        taskCategoryId: task.taskCategoryId,
        assigneeId: task.assigneeId,
        dueDate: task.dueDate,
        statusId: task.statusId,
        taskDetails: task.taskDetails,
        nextToDo: task.nextToDo,
        isRecurring: task.isRecurring,
        complianceFrequency: task.complianceFrequency,
        complianceYear: task.complianceYear,
        complianceDuration: task.complianceDuration,
        complianceStartDate: task.complianceStartDate,
        complianceEndDate: task.complianceEndDate,
        compliancePeriod: compliancePeriod,
        currency: task.currency,
        serviceRate: task.serviceRate,
        invoiceId: task.invoiceId,
        parentTaskId: task.parentTaskId,
        isAutoGenerated: true,
        needsApproval: task.needsApproval !== undefined ? task.needsApproval : true,
        createdAt: task.createdAt,
        updatedAt: new Date()
      }).onConflictDoUpdate({
        target: tasks.id,
        set: {
          isAutoGenerated: true,
          needsApproval: task.needsApproval !== undefined ? task.needsApproval : true,
          updatedAt: new Date()
        }
      });
      
      console.log(`Migrated auto-generated task ${task.id}`);
    }
    
    console.log('Migration of auto-generated tasks completed successfully');
    
    // Optional: Delete the original auto-generated tasks after successful migration
    // await db.delete(autoGeneratedTasks);
    // console.log('Deleted original auto-generated tasks after successful migration');
    
    return true;
  } catch (error) {
    console.error('Error migrating auto-generated tasks:', error);
    return false;
  }
}

/**
 * Update tasks with missing compliance period values
 */
async function updateMissingCompliancePeriods() {
  try {
    console.log('Updating tasks with missing compliance periods...');
    
    // Get all tasks that have a start date and frequency but no compliance period
    const tasksToUpdate = await db.select().from(tasks).where(
      and(
        isNull(tasks.compliancePeriod),
        tasks.complianceStartDate.isNotNull(),
        tasks.complianceFrequency.isNotNull()
      )
    );
    
    console.log(`Found ${tasksToUpdate.length} tasks with missing compliance periods`);
    
    // Update each task with a calculated compliance period
    for (const task of tasksToUpdate) {
      const compliancePeriod = calculateCompliancePeriod(
        task.complianceFrequency,
        new Date(task.complianceStartDate)
      );
      
      await db.update(tasks)
        .set({ 
          compliancePeriod: compliancePeriod,
          updatedAt: new Date()
        })
        .where(eq(tasks.id, task.id));
      
      console.log(`Updated task ${task.id} with compliance period: ${compliancePeriod}`);
    }
    
    console.log('Finished updating tasks with missing compliance periods');
    return true;
  } catch (error) {
    console.error('Error updating missing compliance periods:', error);
    return false;
  }
}

/**
 * Run the migration
 */
async function main() {
  console.log('Starting single-table task migration...');
  
  // First migrate auto-generated tasks to the main tasks table
  const migrationResult = await migrateAutoGeneratedTasks();
  
  if (migrationResult) {
    // Then update any tasks with missing compliance periods
    await updateMissingCompliancePeriods();
  }
  
  console.log('Single-table task migration completed');
}

// Run the migration if this script is executed directly
if (require.main === module) {
  main().catch(console.error);
}

module.exports = {
  migrateAutoGeneratedTasks,
  updateMissingCompliancePeriods,
  calculateCompliancePeriod
};