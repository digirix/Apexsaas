import { IStorage } from "./storage";
import { Task } from "../shared/schema";

/**
 * Approve an auto-generated task.
 * This function implements the "passing the baton" pattern for recurring tasks:
 * 1. The auto-generated task being approved becomes the new recurring task template
 * 2. The parent task that generated it loses its recurring flag
 * 
 * @param storage - The storage interface
 * @param taskId - The ID of the task to approve
 * @param tenantId - The tenant ID for security checks
 * @returns true if approval is successful, false otherwise
 */
export async function approveTask(
  storage: IStorage, 
  taskId: number, 
  tenantId: number
): Promise<boolean> {
  try {
    console.log(`*** FIXED IMPLEMENTATION: Approving task ${taskId} for tenant ${tenantId} ***`);
    
    // Fetch the Approved Task
    const approvedTask = await storage.getTask(taskId, tenantId);
    
    if (!approvedTask) {
      console.error(`Task ${taskId} not found for tenant ${tenantId}`);
      return false;
    }
    
    if (!approvedTask.parentTaskId) {
      console.error(`Task ${taskId} has no parent task ID - this task isn't an auto-generated child we expect`);
      return false;
    }
    
    // Verify this is an auto-generated task that needs approval
    if (approvedTask.isAutoGenerated !== true || approvedTask.needsApproval !== true) {
      console.error(`Task ${taskId} is not an auto-generated task pending approval`);
      return false;
    }
    
    // Fetch its Parent Task
    const parentTask = await storage.getTask(approvedTask.parentTaskId, tenantId);
    
    if (!parentTask) {
      console.error(`Parent task ${approvedTask.parentTaskId} not found`);
      return false;
    }
    
    console.log(`Processing approval for auto-generated task ${taskId} with parent ${parentTask.id}`);
    console.log(`Task flags before approval: isAutoGenerated=${approvedTask.isAutoGenerated}, isRecurring=${approvedTask.isRecurring}, needsApproval=${approvedTask.needsApproval}`);
    console.log(`Parent flags before approval: isAutoGenerated=${parentTask.isAutoGenerated}, isRecurring=${parentTask.isRecurring}`);
    
    // Prepare Updates for the Approved Task
    const approvedTaskUpdates = {
      isRecurring: true,
      isAutoGenerated: false,
      needsApproval: false,
      updatedAt: new Date()
    };
    
    // Perform the Update on the Approved Task (IN PLACE)
    console.log(`Updating approved task ${taskId} with data:`, approvedTaskUpdates);
    await storage.updateTask(taskId, approvedTaskUpdates);
    
    // Prepare Updates for the Parent Task
    const parentTaskUpdates = { 
      isRecurring: false,
      updatedAt: new Date()
    };
    
    // Perform the Update on the Parent Task (IN PLACE)
    console.log(`Setting parent task ${parentTask.id} isRecurring to false (passing the baton)`);
    await storage.updateTask(parentTask.id, parentTaskUpdates);
    
    console.log(`Task ${taskId} has been approved successfully`);
    return true;
  } catch (error) {
    console.error(`Error approving task ${taskId}:`, error);
    return false;
  }
}

/**
 * Reject an auto-generated task
 * 
 * @param storage - The storage interface
 * @param taskId - The ID of the task to reject
 * @param tenantId - The tenant ID for security checks
 * @returns true if rejection is successful, false otherwise
 */
export async function rejectTask(
  storage: IStorage, 
  taskId: number, 
  tenantId: number
): Promise<boolean> {
  try {
    console.log(`Attempting to reject task ${taskId} for tenant ${tenantId}`);
    
    const task = await storage.getTask(taskId, tenantId);
    
    if (!task) {
      console.error(`Task ${taskId} not found for tenant ${tenantId}`);
      return false;
    }
    
    if (task.isAutoGenerated !== true || task.needsApproval !== true) {
      console.error(`Task ${taskId} is not an auto-generated task pending approval`);
      return false;
    }
    
    console.log(`Processing rejection for auto-generated task ${taskId}`);
    
    // Simply mark as canceled and update flags
    await storage.updateTask(taskId, {
      isCanceled: true,
      canceledAt: new Date(),
      needsApproval: false, // No longer needs approval since it's rejected
      updatedAt: new Date()
    });
    
    console.log(`Task ${taskId} has been rejected successfully`);
    return true;
  } catch (error) {
    console.error(`Error rejecting task ${taskId}:`, error);
    return false;
  }
}