/**
 * task-approval.ts
 * 
 * This module provides an improved implementation for approving auto-generated tasks
 * and converting them to regular tasks in the task management system.
 * 
 * The key improvement is that when an auto-generated task is approved, only that specific
 * task instance is moved to the Tasks module while other instances remain in the 
 * Auto Generated Tasks module.
 */

import { IStorage } from "./storage";
import { format } from "date-fns";
import { Task, InsertTask } from "@shared/schema";

/**
 * Approve a specific auto-generated task and convert it to a regular task
 * 
 * This is a completely rewritten implementation that ensures:
 * 1. Only the specific approved task (by ID) is moved to the Tasks Module
 * 2. Multiple instances of the same template task are handled correctly
 * 3. The approved task is properly tracked in the database
 * 
 * @param storage - The data storage implementation
 * @param taskId - The ID of the specific auto-generated task to approve
 * @param tenantId - The tenant ID for security validation
 * @returns A boolean indicating success or failure
 */
/**
 * Approve a specific auto-generated task and create exactly one corresponding regular task.
 * 
 * This function handles the one-to-one relationship between an auto-generated task
 * and its corresponding regular task. It ensures that:
 * 1. Only one regular task is created for each approved auto-generated task
 * 2. The isRecurring flag is only set to true for the latest compliance period
 * 3. All necessary fields and relationships are preserved
 * 
 * @param storage - Data storage interface
 * @param taskId - ID of the auto-generated task to approve
 * @param tenantId - Tenant ID for security validation
 * @returns Promise<boolean> - Success or failure of the approval operation
 */
export async function approveTask(
  storage: IStorage, 
  taskId: number, 
  tenantId: number
): Promise<boolean> {
  try {
    console.log(`\n[APPROVAL] Starting approval process for task ${taskId}`);
    
    // -----------------------------------------------------------------------
    // Step 1: Get the auto-generated task and validate it
    // -----------------------------------------------------------------------
    const task = await storage.getTask(taskId, tenantId);
    
    // Check if task exists
    if (!task) {
      console.error(`[APPROVAL] Task ID ${taskId} not found for tenant ${tenantId}`);
      return false;
    }
    
    // Verify it's an auto-generated task
    if (!task.isAutoGenerated) {
      console.error(`[APPROVAL] Task ${taskId} is not an auto-generated task`);
      return false;
    }
    
    // Check if it's already been processed
    if (!task.needsApproval) {
      console.error(`[APPROVAL] Task ${taskId} is already processed (needsApproval=false)`);
      return false;
    }
    
    // Log basic task information
    const taskType = task.taskType || 'Unknown';
    const clientName = task.clientId ? `Client ${task.clientId}` : 'No client';
    const periodInfo = task.compliancePeriod || 'No period';
    console.log(`[APPROVAL] Processing auto task: ${taskType} | ${clientName} | ${periodInfo}`);
    
    // -----------------------------------------------------------------------
    // Step 2: CRITICAL DUPLICATE CHECK - Only create ONE regular task per auto task
    // -----------------------------------------------------------------------
    // Get all tasks to perform checks against
    const allTasks = await storage.getTasks(tenantId);
    
    // Look for any regular tasks that are ALREADY created from this specific auto task
    const existingRegularTasksForThisAutoTask = allTasks.filter(t => 
      !t.isAutoGenerated && // must be a regular task (not auto-generated)
      t.parentTaskId === task.id // must have THIS specific auto task as direct parent
    );
    
    // If we already have one or more regular tasks created from this auto task, don't create another
    if (existingRegularTasksForThisAutoTask.length > 0) {
      console.log(`[APPROVAL] DUPLICATE PREVENTION: Found ${existingRegularTasksForThisAutoTask.length} existing regular task(s) already created from this auto task. Not creating another.`);
      
      // Just mark the auto task as processed and exit
      await storage.updateTask(taskId, {
        needsApproval: false,
        updatedAt: new Date()
      });
      
      return true; // Return success even though we didn't create a new task (this is expected behavior)
    }
    
    // -----------------------------------------------------------------------
    // Step 3: IMMEDIATELY mark this auto task as processed to prevent race conditions
    // -----------------------------------------------------------------------
    console.log(`[APPROVAL] Marking auto task ${taskId} as processed (needsApproval = false)`);
    await storage.updateTask(taskId, {
      needsApproval: false,
      updatedAt: new Date()
    });
    
    // -----------------------------------------------------------------------
    // Step 4: Determine if this is the latest compliance period
    // -----------------------------------------------------------------------
    // First check if this is a one-time task
    const isOneTime = task.complianceFrequency?.toLowerCase() === 'one time' || 
                      task.complianceFrequency?.toLowerCase() === 'once';
    
    // Default to true (we'll check if there are later periods)
    let isLatestCompliancePeriod = true;
    
    // Only perform this check for recurring (non-one-time) tasks that have compliance periods
    if (!isOneTime && task.parentTaskId && task.complianceEndDate) {
      // Get this task's end date for comparison
      const thisTaskEndDate = new Date(task.complianceEndDate);
      
      // Find all OTHER auto tasks that came from the SAME original template task
      const siblingAutoTasks = allTasks.filter(t => 
        t.isAutoGenerated && // must be an auto-generated task
        t.parentTaskId === task.parentTaskId && // must have the same original parent template
        t.id !== task.id // must not be this task itself
      );
      
      console.log(`[APPROVAL] Found ${siblingAutoTasks.length} other auto tasks from the same template`);
      
      // Look at each sibling task's end date and see if any are LATER than this one
      for (const sibling of siblingAutoTasks) {
        if (sibling.complianceEndDate) {
          const siblingEndDate = new Date(sibling.complianceEndDate);
          
          // If the sibling's end date is AFTER this task's end date, this is NOT the latest period
          if (siblingEndDate > thisTaskEndDate) {
            isLatestCompliancePeriod = false;
            console.log(`[APPROVAL] Found later period: ${sibling.compliancePeriod} (ending ${siblingEndDate.toISOString()})`);
            break;
          }
        }
      }
    }
    
    // Log if this is the latest period or not
    if (isLatestCompliancePeriod) {
      console.log(`[APPROVAL] This IS the latest compliance period`);
    } else {
      console.log(`[APPROVAL] This is NOT the latest compliance period`);
    }
    
    // -----------------------------------------------------------------------
    // Step 5: Create exactly ONE regular task based on this auto task
    // -----------------------------------------------------------------------
    // Ensure all required fields are present
    if (!task.tenantId || !task.assigneeId || !task.dueDate || !task.statusId) {
      console.error(`[APPROVAL] ERROR: Missing required fields for task creation`);
      return false;
    }
    
    // Create the regular task object with all required fields
    const regularTask: Record<string, any> = {
      // Basic task information
      tenantId: task.tenantId,
      isAdmin: task.isAdmin || false,
      taskType: task.taskType || 'Regular',
      assigneeId: task.assigneeId,
      dueDate: task.dueDate,
      statusId: task.statusId,
      taskDetails: task.taskDetails || '',
      nextToDo: task.nextToDo || '',
      
      // Critical flags
      isAutoGenerated: false, // This is now a regular task
      needsApproval: false,   // Regular tasks don't need approval
      parentTaskId: task.id,  // Link DIRECTLY to this specific auto task
      
      // Only set isRecurring=true if this is the latest compliance period
      isRecurring: !isOneTime && isLatestCompliancePeriod,
      
      // Metadata
      createdAt: new Date(),
      isCanceled: false
    };
    
    // Copy client and entity details
    if (task.clientId !== undefined && task.clientId !== null) regularTask.clientId = task.clientId;
    if (task.entityId !== undefined && task.entityId !== null) regularTask.entityId = task.entityId;
    if (task.serviceTypeId !== undefined && task.serviceTypeId !== null) regularTask.serviceTypeId = task.serviceTypeId;
    if (task.taskCategoryId !== undefined && task.taskCategoryId !== null) regularTask.taskCategoryId = task.taskCategoryId;
    
    // Copy compliance fields - these maintain the correct periods
    if (task.complianceFrequency) regularTask.complianceFrequency = task.complianceFrequency;
    if (task.complianceYear) regularTask.complianceYear = task.complianceYear;
    if (task.complianceDuration) regularTask.complianceDuration = task.complianceDuration;
    if (task.complianceStartDate) regularTask.complianceStartDate = task.complianceStartDate;
    if (task.complianceEndDate) regularTask.complianceEndDate = task.complianceEndDate;
    if (task.compliancePeriod) regularTask.compliancePeriod = task.compliancePeriod;
    
    // Copy financial fields
    if (task.currency) regularTask.currency = task.currency;
    if (task.serviceRate !== undefined) regularTask.serviceRate = task.serviceRate;
    if (task.invoiceId !== undefined && task.invoiceId !== null) regularTask.invoiceId = task.invoiceId;
    
    // Log recurring status
    console.log(`[APPROVAL] Creating regular task with isRecurring = ${regularTask.isRecurring ? 'Yes' : 'No'}`);
    
    // -----------------------------------------------------------------------
    // Step 6: Save the regular task to the database
    // -----------------------------------------------------------------------
    try {
      // Use 'as any' to bypass TypeScript's type checking since we've carefully built the object
      const newTaskId = await storage.createTask(regularTask as any);
      
      if (!newTaskId) {
        console.error(`[APPROVAL] Failed to create regular task from auto task ${taskId}`);
        return false;
      }
      
      console.log(`[APPROVAL] ✓ Successfully created ONE regular task (ID: ${newTaskId})`);
      
      // -----------------------------------------------------------------------
      // Step 7: Update the original template task if this is the latest period
      // -----------------------------------------------------------------------
      if (isLatestCompliancePeriod && task.parentTaskId) {
        const templateId = task.parentTaskId;
        
        // Get the original template task
        const templateTask = await storage.getTask(templateId, tenantId);
        
        if (templateTask) {
          // Stop the template from recurring since we now have a regular task for the latest period
          await storage.updateTask(templateId, {
            isRecurring: false,
            updatedAt: new Date()
          });
          
          console.log(`[APPROVAL] ✓ Updated original template task ${templateId} (set isRecurring=false)`);
        }
      }
      
      return true;
    } catch (error) {
      console.error(`[APPROVAL] Error creating regular task:`, error);
      return false;
    }
  } catch (error) {
    console.error(`[APPROVAL] Error in approval process:`, error);
    return false;
  }
}