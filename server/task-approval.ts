/**
 * task-approval.ts
 * 
 * This module provides an improved implementation for approving auto-generated tasks
 * and converting them to regular tasks in the task management system.
 * 
 * The key improvement is that when an auto-generated task is approved, only that specific
 * task instance is moved to the Tasks module while other instances remain in the 
 * Auto Generated Tasks module.
 */

import { IStorage } from "./storage";
import { format } from "date-fns";
import { Task, InsertTask } from "@shared/schema";

/**
 * Approve a specific auto-generated task and convert it to a regular task
 * 
 * This is a completely rewritten implementation that ensures:
 * 1. Only the specific approved task (by ID) is moved to the Tasks Module
 * 2. Multiple instances of the same template task are handled correctly
 * 3. The approved task is properly tracked in the database
 * 
 * @param storage - The data storage implementation
 * @param taskId - The ID of the specific auto-generated task to approve
 * @param tenantId - The tenant ID for security validation
 * @returns A boolean indicating success or failure
 */
export async function approveTask(
  storage: IStorage, 
  taskId: number, 
  tenantId: number
): Promise<boolean> {
  try {
    console.log(`[TASK APPROVAL] Starting approval process for auto-generated task ID ${taskId}`);
    
    // Step 1: Get the specific auto-generated task by ID
    const task = await storage.getTask(taskId, tenantId);
    
    // Basic validation
    if (!task) {
      console.log(`[TASK APPROVAL] Task ${taskId} not found for tenant ${tenantId}`);
      return false;
    }
    
    if (!task.isAutoGenerated) {
      console.log(`[TASK APPROVAL] Task ${taskId} is not an auto-generated task`);
      return false;
    }
    
    if (!task.needsApproval) {
      console.log(`[TASK APPROVAL] Task ${taskId} does not need approval (already processed)`);
      return false;
    }
    
    // Log task details
    const clientId = task.clientId !== undefined ? task.clientId : 'none';
    const entityId = task.entityId !== undefined ? task.entityId : 'none';
    const serviceId = task.serviceTypeId !== undefined ? task.serviceTypeId : 'none';
    
    console.log(`[TASK APPROVAL] Processing auto task: client: ${clientId}, entity: ${entityId}, service: ${serviceId}`);
    
    // Get all tasks to check for duplicates and determine latest compliance period
    const allTasks = await storage.getTasks(tenantId);
    
    // -----------------------------------------------------------------------
    // CRITICAL CHECK: Prevent creating multiple regular tasks for the same auto task
    // -----------------------------------------------------------------------
    // Look for regular tasks that were created from this specific auto task
    const regularTasksFromThisAutoTask = allTasks.filter(t => 
      !t.isAutoGenerated && // is a regular task
      t.parentTaskId === task.id // has this auto task as parent
    );
    
    if (regularTasksFromThisAutoTask.length > 0) {
      console.log(`[TASK APPROVAL] DUPLICATE PREVENTION: Found ${regularTasksFromThisAutoTask.length} existing regular task(s) already created from this auto task. NOT creating another one.`);
      
      // Just mark the auto task as processed and exit
      await storage.updateTask(taskId, {
        needsApproval: false,
        updatedAt: new Date()
      });
      
      return true;
    }
    
    // -----------------------------------------------------------------------
    // Immediately mark the auto task as processed to prevent double-approval
    // -----------------------------------------------------------------------
    console.log(`[TASK APPROVAL] Marking auto task ${taskId} as processed (needsApproval = false)`);
    await storage.updateTask(taskId, {
      needsApproval: false,
      updatedAt: new Date()
    });
    
    // -----------------------------------------------------------------------
    // Determine if this is the latest compliance period
    // -----------------------------------------------------------------------
    // First check if this is a one-time task (not recurring)
    const isOneTime = task.complianceFrequency?.toLowerCase() === 'one time' || 
                      task.complianceFrequency?.toLowerCase() === 'once';
    
    // Default assumption - we'll check if there's a later period
    let isLatestCompliancePeriod = true;
    
    // Only check for latest period if:
    // 1. It's not a one-time task
    // 2. It has a parent task (original template)
    // 3. It has a compliance end date to compare
    if (!isOneTime && task.parentTaskId && task.complianceEndDate) {
      const currentTaskEndDate = new Date(task.complianceEndDate);
      const compliancePeriod = task.compliancePeriod || 'unknown';
      
      console.log(`[TASK APPROVAL] Checking if this is the latest period. Current task: ${compliancePeriod}, end date: ${currentTaskEndDate.toISOString()}`);
      
      // Find all OTHER auto tasks with the SAME parent template
      const siblingAutoTasks = allTasks.filter(t => 
        t.isAutoGenerated && // is an auto-generated task
        t.parentTaskId === task.parentTaskId && // has same parent template
        t.id !== task.id // exclude this task itself
      );
      
      console.log(`[TASK APPROVAL] Found ${siblingAutoTasks.length} other auto tasks with the same parent template`);
      
      // Check if any sibling auto task has a LATER compliance period
      for (const sibling of siblingAutoTasks) {
        if (sibling.complianceEndDate) {
          const siblingEndDate = new Date(sibling.complianceEndDate);
          const siblingPeriod = sibling.compliancePeriod || 'unknown';
          
          // If we find any task with a later end date, this is NOT the latest period
          if (siblingEndDate > currentTaskEndDate) {
            isLatestCompliancePeriod = false;
            console.log(`[TASK APPROVAL] Found a later period: ${siblingPeriod} ending ${siblingEndDate.toISOString()}`);
            break;
          }
        }
      }
      
      // Log whether this is the latest period
      if (isLatestCompliancePeriod) {
        console.log(`[TASK APPROVAL] ✓ This IS the latest compliance period (${compliancePeriod})`);
      } else {
        console.log(`[TASK APPROVAL] ✗ This is NOT the latest compliance period (${compliancePeriod})`);
      }
    }
    
    // -----------------------------------------------------------------------
    // Create a new regular task from this auto task
    // -----------------------------------------------------------------------
    console.log(`[TASK APPROVAL] Creating a single regular task from auto task ${taskId}`);
    
    // Ensure all required fields are present
    if (!task.tenantId || !task.assigneeId || !task.dueDate || !task.statusId) {
      console.error(`[TASK APPROVAL] ERROR: Missing required fields for task creation`);
      return false;
    }
    
    // Create a regular task with the same fields as the auto task
    const regularTask: Record<string, any> = {
      // Basic information
      tenantId: task.tenantId,
      isAdmin: task.isAdmin || false,
      taskType: task.taskType || 'Regular',
      assigneeId: task.assigneeId,
      dueDate: task.dueDate,
      statusId: task.statusId,
      taskDetails: task.taskDetails || '',
      nextToDo: task.nextToDo || '',
      
      // KEY FIELDS:
      isAutoGenerated: false, // This makes it a regular task, not auto-generated
      needsApproval: false,   // Regular tasks don't need approval
      parentTaskId: task.id,  // Link DIRECTLY to this specific auto task (not the original template)
      
      // CRITICAL: Only set isRecurring=true if this is the latest compliance period
      isRecurring: !isOneTime && isLatestCompliancePeriod,
      
      // Metadata
      createdAt: new Date(),
      isCanceled: false
    };
    
    // Copy client, entity, and service details
    if (task.clientId !== undefined && task.clientId !== null) regularTask.clientId = task.clientId;
    if (task.entityId !== undefined && task.entityId !== null) regularTask.entityId = task.entityId;
    if (task.serviceTypeId !== undefined && task.serviceTypeId !== null) regularTask.serviceTypeId = task.serviceTypeId;
    if (task.taskCategoryId !== undefined && task.taskCategoryId !== null) regularTask.taskCategoryId = task.taskCategoryId;
    
    // Copy compliance fields - CRUCIAL for maintaining correct compliance periods
    if (task.complianceFrequency) regularTask.complianceFrequency = task.complianceFrequency;
    if (task.complianceYear) regularTask.complianceYear = task.complianceYear;
    if (task.complianceDuration) regularTask.complianceDuration = task.complianceDuration;
    if (task.complianceStartDate) regularTask.complianceStartDate = task.complianceStartDate;
    if (task.complianceEndDate) regularTask.complianceEndDate = task.complianceEndDate;
    if (task.compliancePeriod) regularTask.compliancePeriod = task.compliancePeriod;
    
    // Copy financial fields
    if (task.currency) regularTask.currency = task.currency;
    if (task.serviceRate !== undefined) regularTask.serviceRate = task.serviceRate;
    if (task.invoiceId !== undefined && task.invoiceId !== null) regularTask.invoiceId = task.invoiceId;
    
    // Log whether this task will be recurring
    console.log(`[TASK APPROVAL] Regular task will have isRecurring = ${regularTask.isRecurring ? 'Yes' : 'No'}`);
    console.log(`[TASK APPROVAL] Compliance period: ${regularTask.compliancePeriod || 'Not set'}`);
    
    // Create the regular task in the database
    try {
      // Use 'as any' to bypass TypeScript's type checking since we've constructed the object carefully
      const newTaskId = await storage.createTask(regularTask as any);
      
      if (!newTaskId) {
        console.error(`[TASK APPROVAL] Failed to create regular task`);
        return false;
      }
      
      console.log(`[TASK APPROVAL] ✓ Successfully created ONE regular task with ID ${newTaskId}`);
      
      // -----------------------------------------------------------------------
      // Update the original template task if this is the latest period
      // -----------------------------------------------------------------------
      if (isLatestCompliancePeriod && task.parentTaskId) {
        const templateId = task.parentTaskId;
        console.log(`[TASK APPROVAL] Updating original template task ${templateId}`);
        
        // Get the template task
        const templateTask = await storage.getTask(templateId, tenantId);
        
        if (templateTask) {
          // Since we now have a regular task for the latest period, we can stop the template from recurring
          await storage.updateTask(templateId, {
            isRecurring: false,  // Stop the original task from recurring
            updatedAt: new Date()
          });
          console.log(`[TASK APPROVAL] ✓ Set original template task ${templateId} to non-recurring`);
        }
      }
      
      return true;
    } catch (error) {
      console.error(`[TASK APPROVAL] Error creating regular task:`, error);
      return false;
    }
  } catch (error) {
    console.error(`[TASK APPROVAL] Error in approval process:`, error);
    return false;
  }
}