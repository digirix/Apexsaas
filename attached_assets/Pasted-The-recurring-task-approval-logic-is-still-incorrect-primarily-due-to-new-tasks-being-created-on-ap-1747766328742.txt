The recurring task approval logic is still incorrect, primarily due to new tasks being created on approval and is_recurring flags not being updated correctly.
Your primary task is to modify the 
Locate the following method signature in 
public async approveTask(taskId: number, tenantId: number): Promise<boolean> {
  // ... existing (incorrect) implementation ...
}
You need to COMPLETELY REPLACE the entire body of this existing approveTask method with the new, corrected implementation provided below. Do not merge or add to the old code; the old logic for approveTask must be fully removed and substituted with this new version.
Here is the new and correct code for 

// PASTE THE CORRECTED approveTask CODE FROM THE PREVIOUS RESPONSE HERE
// (The full method starting with public async approveTask... and ending with the final } )
public async approveTask(taskId: number, tenantId: number): Promise<boolean> {
  try {
    console.log(`*** NEW APPROVAL LOGIC: Attempting to approve task ${taskId} for tenant ${tenantId} ***`);

    // 1. Fetch the Approved Auto-Generated Task
    const approvedTask = await this.storage.getTask(taskId, tenantId); // Ensure getTask returns full Task object

    if (!approvedTask) {
      console.error(`Task ${taskId} not found for tenant ${tenantId}`);
      return false;
    }

    if (!approvedTask.isAutoGenerated || !approvedTask.needsApproval) {
      console.warn(`Task ${taskId} is not an auto-generated task needing approval. isAutoGenerated: ${approvedTask.isAutoGenerated}, needsApproval: ${approvedTask.needsApproval}`);
      return false;
    }

    // Ensure parentTaskId exists on the approvedTask object from storage.getTask
    if (approvedTask.parentTaskId === null || approvedTask.parentTaskId === undefined) { 
      console.error(`Task ${taskId} is auto-generated but has no parentTaskId. Cannot proceed with 'baton pass'.`);
      return false;
    }

    // 2. Fetch its Original Parent Task
    const originalParentTask = await this.storage.getTask(approvedTask.parentTaskId, tenantId);

    if (!originalParentTask) {
      console.error(`Original parent task ${approvedTask.parentTaskId} not found for approved task ${taskId}.`);
      return false; 
    }

    // 3. Prepare Updates for the Approved Task (to make IT the new recurring master)
    const approvedTaskUpdates: Partial<Task> = { // Ensure Task type is imported if not globally available
      isRecurring: true,
      isAutoGenerated: false,
      needsApproval: false,
      // statusId: ID_OF_ACTIVE_STATUS, // Optional: Consider adding status update logic if needed
      updatedAt: new Date(),
    };

    // 4. Perform the Update on the Approved Task (IN PLACE)
    console.log(`Updating approved task ${approvedTask.id} with:`, JSON.stringify(approvedTaskUpdates));
    const approvedTaskUpdated = await this.storage.updateTask(approvedTask.id, approvedTaskUpdates);
    if (!approvedTaskUpdated) {
      console.error(`Failed to update approved task ${approvedTask.id}.`);
      return false;
    }
    console.log(`Approved task ${approvedTask.id} successfully updated.`);

    // 5. Prepare Updates for the Original Parent Task
    const parentTaskUpdates: Partial<Task> = { // Ensure Task type is imported
      isRecurring: false,
      // statusId: ID_OF_SUPERSEDED_STATUS, // Optional: Consider adding status update logic
      updatedAt: new Date(),
    };

    // 6. Perform the Update on the Original Parent Task (IN PLACE)
    console.log(`Updating original parent task ${originalParentTask.id} with:`, JSON.stringify(parentTaskUpdates));
    const parentTaskUpdated = await this.storage.updateTask(originalParentTask.id, parentTaskUpdates);
    if (!parentTaskUpdated) {
      // Log an error but consider if this should be a fatal error for the approval
      console.error(`Failed to update original parent task ${originalParentTask.id} to set isRecurring=false.`);
    } else {
      console.log(`Original parent task ${originalParentTask.id} successfully updated.`);
    }

    console.log(`Task ${taskId} approved successfully with 'baton pass' logic.`);
    return true;

  } catch (error) {
    console.error(`Error in approveTask for task ${taskId}:`, error);
    return false;
  }
}
Additional Instructions:
After replacing the approveTask method, double-check that this.storage.getTask() returns the full task object including parentTaskId, and that this.storage.updateTask() correctly performs an SQL UPDATE on the existing record by its ID and does not create new records.
Ensure all other potentially conflicting approval implementations (e.g., in files like task-approval.ts, task-scheduler-new.ts, or incorrect route handlers) are completely removed or disabled, and that all relevant API routes for task approval correctly call this modified TaskScheduler.approveTask method.
Please confirm once these specific changes have been made so I can re-test.
