# TODO

**Project:** Accounting Firm Management Application
**Sources:** PRD, TDD, PLANNING.md (Revised)

*This list outlines development tasks based on the project documentation. Mark items with `[x]` as they are completed. Tasks reference TDD sections where applicable.*

## Milestone 1: Foundation & Setup

### Environment & Core Setup (TDD Section 2, 3)

- [ ] Initialize Replit project environment (Python/Flask or Node/Express - *Confirm Choice*).
- [ ] Configure and connect to Replit PostgreSQL database.
- [ ] Set up backend project structure & ORM (SQLAlchemy/Django ORM - *Confirm Choice*).
- [ ] Set up frontend project structure (React/Vue/SSR - *Confirm Choice*).
- [ ] Implement basic backend routing & API structure (`/api/v1`).
- [ ] Implement basic frontend layout shell & routing.
- [ ] Initialize Git repository & make initial commit.

### DB Schema & Auth APIs (TDD Section 4, 5)

- [ ] DB: Implement `tenants` table schema.
- [ ] DB: Implement `users` table schema (incl. hashing).
- [ ] DB: Implement basic `roles` & `permissions` tables schema (or chosen permission structure).
- [ ] API: Implement `POST /auth/signup` endpoint (creates tenant, super admin user).
- [ ] API: Implement `POST /auth/login/firm` endpoint (returns user context, token/session).
- [ ] API: Implement basic auth middleware (verifies token/session, attaches user/tenant context).
- [ ] API: Implement `POST /auth/logout` endpoint.
- [ ] API: Implement placeholder for `POST /auth/forgot-password` & `POST /auth/reset-password`.

### Setup Module Implementation (TDD Section 4, 5)

- [ ] DB: Implement schema for `countries`, `currencies`, `states`.
- [ ] DB: Implement schema for `vat_sales_tax_jurisdictions`.
- [ ] DB: Implement schema for `entity_types`.
- [ ] DB: Implement schema for `service_billing_basis`.
- [ ] DB: Implement schema for `service_types`.
- [ ] DB: Implement schema for `task_categories`.
- [ ] DB: Implement schema for `task_statuses` (incl. rank logic validation).
- [ ] DB: Implement schema for `designations`, `departments`.
- [ ] API: Implement basic CRUD endpoints for `countries` (`GET`, `POST`, `PUT`, `DELETE /setup/countries/...`).
- [ ] API: Implement basic CRUD endpoints for `currencies`.
- [ ] API: Implement basic CRUD endpoints for `states` (handle country filtering).
- [ ] API: Implement basic CRUD endpoints for `task_statuses`.
- [ ] API: Implement basic CRUD endpoints for `service_types`.
- [ ] UI: Implement basic frontend forms/lists for managing Countries, Currencies, States, Task Statuses, Service Types. (*Expand for other Setup items later*).

### User Management (Members) (TDD Section 4, 5)

- [ ] API: Implement `GET /users` (list firm members).
- [ ] API: Implement `POST /users` (Super Admin adds Member).
- [ ] API: Implement `GET /users/{user_id}`.
- [ ] API: Implement `PUT /users/{user_id}` (update Member details).
- [ ] API: Implement `DELETE /users/{user_id}`.
- [ ] UI: Implement basic Member management UI (List, Add/Edit form).
- [ ] API: Implement basic Permission checking logic within relevant API endpoints (initial decorator/check).

## Milestone 2: Core Operations

### Client Module Implementation (TDD Section 4, 5)

- [ ] DB: Implement schema for `clients`.
- [ ] DB: Implement schema for `entities`.
- [ ] API: Implement `GET`, `POST`, `PUT`, `DELETE /clients/...` endpoints.
- [ ] API: Implement `GET`, `POST`, `PUT`, `DELETE /clients/{client_id}/entities/...` endpoints (ensure dropdown data is pulled from Setup).
- [ ] UI: Implement Client list view.
- [ ] UI: Implement Client Add/Edit form.
- [ ] UI: Implement Entity list view (within Client detail).
- [ ] UI: Implement Entity Add/Edit form (with dynamic dropdowns).

### Task Module Implementation (TDD Section 4, 5)

- [ ] DB: Implement `tasks` table schema (core fields for Admin/Revenue, links, status, etc.).
- [ ] API: Implement `POST /tasks` endpoint (handle Admin vs Revenue task creation logic).
- [ ] API: Implement `GET /tasks` endpoint (basic listing, initial filters).
- [ ] API: Implement `GET /tasks/{task_id}` endpoint.
- [ ] API: Implement `PUT /tasks/{task_id}` endpoint (update basic fields like status, assignee, due date).
- [ ] API: Implement `DELETE /tasks/{task_id}` endpoint.
- [ ] UI: Implement Admin Task creation form.
- [ ] UI: Implement Revenue Task creation form (Basic Info tab).
- [ ] UI: Implement Task list view (basic display).

## Milestone 3: Connectivity & Flow

- [ ] DB: Implement `entity_jurisdiction_map` schema.
- [ ] DB: Implement `entity_service_subscriptions` schema.
- [ ] API: Implement `PUT /entities/{entity_id}/jurisdictions` endpoint.
- [ ] API: Implement `GET /entities/{entity_id}/services` endpoint.
- [ ] API: Implement `PUT /entities/{entity_id}/services` endpoint.
- [ ] UI: Implement UI for managing Entity Jurisdictions.
- [ ] UI: Implement UI for managing Entity Service Subscriptions (Required/Subscribed checkboxes).
- [ ] DB: Add recurring task fields to `tasks` table schema (`is_recurring`, `original_task_id`, etc.).
- [ ] Backend: Implement basic structure for background scheduler (e.g., configure APScheduler).
- [ ] Backend: Implement initial logic for recurring task generation job (queries tasks, calculates next date - *full logic later*).
- [ ] DB: Implement `invoices`, `invoice_lines` table schema.
- [ ] API: Implement placeholder/basic structure for `POST /invoices/from-tasks` endpoint.

## Milestone 4: AI Integration (MVP)

- [ ] DB: Implement `tenant_settings` table schema (incl. `gemini_api_key_encrypted`).
- [ ] Backend: Implement secure encryption/decryption logic for API keys.
- [ ] API: Implement `GET /settings` & `PUT /settings/api-keys/gemini` endpoints.
- [ ] UI: Implement Settings section for saving Gemini API Key.
- [ ] Backend: Create Gemini API client service/helper function.
- [ ] API: Implement `POST /entities/{entity_id}/suggest-required-services` endpoint.
- [ ] UI: Integrate "Suggest Required" button/feature in Entity Services UI.
- [ ] API: Implement `POST /tasks/suggest-details` endpoint.
- [ ] UI: Integrate "Suggest Details" button/feature in Revenue Task creation form.

## Milestone 5: Finance & Payments (MVP)

- [ ] DB: Implement `payments` table schema.
- [ ] API: Implement basic CRUD endpoints for `invoices`.
- [ ] API: Implement `POST /invoices/{invoice_id}/record-payment` endpoint.
- [ ] UI: Implement basic Invoice list view & detail view.
- [ ] UI: Implement basic form for recording manual payments.
- [ ] DB: Add Payment Gateway fields to `tenant_settings` schema.
- [ ] API: Implement `PUT /settings/payment-gateways/stripe` endpoint.
- [ ] API: Implement `PUT /settings/payment-gateways/paypal` endpoint.
- [ ] UI: Implement Settings section for configuring Stripe/PayPal keys.
- [ ] API: Implement basic `POST /webhooks/stripe` endpoint structure (receive event, log).
- [ ] API: Implement basic `POST /webhooks/paypal` endpoint structure (receive event, log).
- [ ] Logic: Add "Pay Now" link generation concept when retrieving/displaying 'Sent' invoices.

## Milestone 6: Client Facing

- [ ] DB: Implement `client_contacts` table schema.
- [ ] API: Implement `GET`, `POST`, `PUT`, `DELETE /clients/{client_id}/portal-access/...` endpoints.
- [ ] UI: Implement UI section within Client details for managing Portal Access contacts.
- [ ] API: Implement `POST /auth/login/client` endpoint.
- [ ] API: Implement `GET /portal/dashboard` endpoint.
- [ ] API: Implement `GET /portal/entities` endpoint.
- [ ] API: Implement `GET /portal/tasks` endpoint.
- [ ] API: Implement `GET /portal/profile` endpoint.
- [ ] API: Implement `PUT /portal/profile/change-password` endpoint.
- [ ] Frontend: Implement separate Client Portal UI shell/routing.
- [ ] Frontend: Implement Client Portal Login page.
- [ ] Frontend: Implement Client Portal Dashboard view.
- [ ] Frontend: Implement Client Portal Entities view.
- [ ] Frontend: Implement Client Portal Tasks view.
- [ ] Frontend: Implement Client Portal Profile view (incl. password change form).

## Milestone 7: Automation

- [ ] DB: Implement `workflows`, `workflow_actions`, `workflow_execution_logs` schema.
- [ ] API: Implement `GET`, `POST`, `PUT`, `DELETE /workflows/...` endpoints.
- [ ] UI: Implement Workflow list & definition/management form.
- [ ] Backend: Implement core workflow execution engine logic (handle triggers like `task.status_changed`).
- [ ] Backend: Implement execution logic for initial actions (e.g., Change Task Status, Change Assignee).
- [ ] Backend: Implement logging to `workflow_execution_logs`.
- [ ] Backend: Integrate time-based workflow triggers with the scheduler.

## Milestone 8: Refinement & Testing

- [ ] Testing: Write unit/integration tests for critical backend logic (Auth, Permissions, Workflows).
- [ ] Testing: Perform thorough testing of role-based permissions.
- [ ] Testing: Conduct end-to-end testing of major user flows (Signup -> Setup -> Client -> Task -> Invoice).
- [ ] Security: Perform security review based on TDD security considerations.
- [ ] Performance: Test response times for key API endpoints and database queries under simulated load.
- [ ] Docs: Update `README.md`, review inline code comments.
- [ ] Bug Fixing: Address issues identified during testing.

---
*This TODO list provides a structured path based on the defined milestones and technical design. It should be updated frequently as tasks are completed and new details emerge.*