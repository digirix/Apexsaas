import { useState, useEffect } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardHeader, CardTitle, CardContent, CardFooter, CardDescription } from '@/components/ui/card';
import { Separator } from '@/components/ui/separator';
import { toast } from '@/hooks/use-toast';
import MainLayout from '@/layouts/main-layout';

export default function TestApprovalPage() {
  const [tasks, setTasks] = useState<any[]>([]);
  const [loading, setLoading] = useState(true);
  const [approvalResults, setApprovalResults] = useState<any>(null);
  const [taskCount, setTaskCount] = useState({ before: 0, after: 0 });

  useEffect(() => {
    fetchAutoGeneratedTasks();
  }, []);

  const fetchAutoGeneratedTasks = async () => {
    setLoading(true);
    try {
      const response = await fetch('/api/v1/auto-generated-tasks');
      if (response.ok) {
        const data = await response.json();
        setTasks(Array.isArray(data) ? data : []);
      } else {
        console.error('Failed to fetch tasks:', await response.text());
        toast({
          title: 'Error',
          description: 'Failed to fetch auto-generated tasks',
          variant: 'destructive'
        });
      }
    } catch (error) {
      console.error('Error fetching tasks:', error);
      toast({
        title: 'Error',
        description: 'Failed to fetch auto-generated tasks',
        variant: 'destructive'
      });
    } finally {
      setLoading(false);
    }
  };

  const countAllTasks = async () => {
    try {
      const response = await fetch('/api/v1/tasks');
      if (response.ok) {
        const data = await response.json();
        return Array.isArray(data) ? data.length : 0;
      }
      return 0;
    } catch (error) {
      console.error('Error counting tasks:', error);
      return 0;
    }
  };

  const testApproveTask = async (taskId: number) => {
    if (!taskId) return;
    
    try {
      // First count existing tasks
      const beforeCount = await countAllTasks();
      setTaskCount(prev => ({ ...prev, before: beforeCount }));
      
      // Test approval through our debug endpoint
      const testResponse = await fetch(`/api/v1/debug/test-approval/${taskId}`);
      if (testResponse.ok) {
        const results = await testResponse.json();
        setApprovalResults(results);
        
        // Count tasks after approval
        const afterCount = await countAllTasks();
        setTaskCount(prev => ({ ...prev, after: afterCount }));
        
        toast({
          title: 'Success',
          description: 'Task approval test completed',
        });
        
        // Refresh task list
        fetchAutoGeneratedTasks();
      } else {
        console.error('Failed to test approval:', await testResponse.text());
        toast({
          title: 'Error',
          description: 'Failed to test task approval',
          variant: 'destructive'
        });
      }
    } catch (error) {
      console.error('Error testing approval:', error);
      toast({
        title: 'Error',
        description: 'Failed to test task approval',
        variant: 'destructive'
      });
    }
  };

  return (
    <MainLayout>
      <div className="container mx-auto py-8">
        <h1 className="text-3xl font-bold mb-6">Task Approval Testing</h1>
        
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <Card className="w-full">
            <CardHeader>
              <CardTitle>Auto-Generated Tasks</CardTitle>
              <CardDescription>Tasks that need approval</CardDescription>
            </CardHeader>
            <CardContent>
              {loading ? (
                <p>Loading tasks...</p>
              ) : tasks.length === 0 ? (
                <p>No auto-generated tasks found</p>
              ) : (
                <div className="space-y-4">
                  {tasks.map((task) => (
                    <div key={task.id} className="p-4 border rounded-md">
                      <div className="flex justify-between">
                        <span className="font-medium">Task ID: {task.id}</span>
                        <Button 
                          onClick={() => testApproveTask(task.id)}
                          variant="outline"
                          size="sm"
                        >
                          Test Approval
                        </Button>
                      </div>
                      <p className="mt-1 text-sm text-gray-700">{task.taskDetails || 'No details'}</p>
                      <p className="text-xs text-gray-600 mt-2">
                        Parent Task: {task.parentTaskId || 'None'} | 
                        Period: {task.compliancePeriod || 'N/A'} |
                        Auto-Generated: {task.isAutoGenerated ? 'Yes' : 'No'} |
                        Recurring: {task.isRecurring ? 'Yes' : 'No'} |
                        Needs Approval: {task.needsApproval ? 'Yes' : 'No'}
                      </p>
                    </div>
                  ))}
                </div>
              )}
            </CardContent>
            <CardFooter>
              <Button onClick={fetchAutoGeneratedTasks} disabled={loading}>
                Refresh Tasks
              </Button>
            </CardFooter>
          </Card>
          
          <Card className="w-full">
            <CardHeader>
              <CardTitle>Approval Test Results</CardTitle>
              <CardDescription>Task state changes during approval</CardDescription>
            </CardHeader>
            <CardContent>
              {approvalResults ? (
                <div className="space-y-4">
                  <div className="p-3 rounded-md bg-gray-50">
                    <h3 className="font-semibold">Task Count</h3>
                    <p>Before: {taskCount.before} | After: {taskCount.after}</p>
                    {taskCount.before === taskCount.after ? (
                      <div className="text-green-600 mt-1">✓ No new tasks created (correct)</div>
                    ) : (
                      <div className="text-red-600 mt-1">❌ New tasks were created (incorrect)</div>
                    )}
                  </div>
                  
                  <Separator />
                  
                  <div className="p-3 rounded-md bg-gray-50">
                    <h3 className="font-semibold">Task ID: {approvalResults.taskBefore?.id}</h3>
                    <div className="mt-2">
                      <div className="grid grid-cols-2 gap-4">
                        <div>
                          <h4 className="text-sm font-medium">Before Approval:</h4>
                          <ul className="text-xs space-y-1 mt-1">
                            <li>Auto-Generated: {approvalResults.taskBefore?.isAutoGenerated ? 'Yes' : 'No'}</li>
                            <li>Recurring: {approvalResults.taskBefore?.isRecurring ? 'Yes' : 'No'}</li>
                            <li>Needs Approval: {approvalResults.taskBefore?.needsApproval ? 'Yes' : 'No'}</li>
                          </ul>
                        </div>
                        <div>
                          <h4 className="text-sm font-medium">After Approval:</h4>
                          <ul className="text-xs space-y-1 mt-1">
                            <li>Auto-Generated: {approvalResults.taskAfter?.isAutoGenerated ? 'Yes' : 'No'}</li>
                            <li>Recurring: {approvalResults.taskAfter?.isRecurring ? 'Yes' : 'No'}</li>
                            <li>Needs Approval: {approvalResults.taskAfter?.needsApproval ? 'Yes' : 'No'}</li>
                          </ul>
                        </div>
                      </div>
                      
                      {approvalResults.taskAfter?.isAutoGenerated === false && 
                       approvalResults.taskAfter?.isRecurring === true && 
                       approvalResults.taskAfter?.needsApproval === false ? (
                        <div className="text-green-600 mt-2">✓ Task flags updated correctly</div>
                      ) : (
                        <div className="text-red-600 mt-2">❌ Task flags not updated correctly</div>
                      )}
                    </div>
                  </div>
                  
                  <Separator />
                  
                  <div className="p-3 rounded-md bg-gray-50">
                    <h3 className="font-semibold">Parent Task ID: {approvalResults.parentBefore?.id}</h3>
                    <div className="mt-2">
                      <div className="grid grid-cols-2 gap-4">
                        <div>
                          <h4 className="text-sm font-medium">Before Approval:</h4>
                          <p className="text-xs mt-1">
                            Recurring: {approvalResults.parentBefore?.isRecurring ? 'Yes' : 'No'}
                          </p>
                        </div>
                        <div>
                          <h4 className="text-sm font-medium">After Approval:</h4>
                          <p className="text-xs mt-1">
                            Recurring: {approvalResults.parentAfter?.isRecurring ? 'Yes' : 'No'}
                          </p>
                        </div>
                      </div>
                      
                      {approvalResults.parentAfter?.isRecurring === false ? (
                        <div className="text-green-600 mt-2">✓ Parent recurring flag set to false (correct)</div>
                      ) : (
                        <div className="text-red-600 mt-2">❌ Parent recurring flag not updated correctly</div>
                      )}
                    </div>
                  </div>
                </div>
              ) : (
                <p>No test results yet. Select a task and click "Test Approval".</p>
              )}
            </CardContent>
          </Card>
        </div>
      </div>
    </MainLayout>
  );
}