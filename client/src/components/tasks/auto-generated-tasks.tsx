import { useState } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { Task } from '@shared/schema';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Separator } from '@/components/ui/separator';
import { ScrollArea } from '@/components/ui/scroll-area';
import { Loader2, AlertCircle, CheckCircle, RefreshCw, Calendar } from 'lucide-react';
import { format } from 'date-fns';
import { apiRequest } from '@/lib/queryClient';
import { useToast } from '@/hooks/use-toast';

type AutoGeneratedTask = Task & { isSelected?: boolean };

export function AutoGeneratedTasks() {
  const { toast } = useToast();
  const queryClient = useQueryClient();
  const [isGeneratingTasks, setIsGeneratingTasks] = useState(false);
  const [generatedTasks, setGeneratedTasks] = useState<AutoGeneratedTask[]>([]);
  const [selectedTaskIds, setSelectedTaskIds] = useState<number[]>([]);
  
  // Function to generate all pending recurring tasks
  const generateTasks = async () => {
    setIsGeneratingTasks(true);
    try {
      const response = await apiRequest('/api/v1/tasks/auto-generate-recurring', 'POST');
      const data = await response.json();
      
      // Mark all generated tasks as selected by default
      const tasks = data.tasks.map((task: Task) => ({
        ...task,
        isSelected: true,
      }));
      
      setGeneratedTasks(tasks);
      setSelectedTaskIds(tasks.map((task: Task) => task.id));
      
      if (tasks.length === 0) {
        toast({
          title: "No New Tasks",
          description: "There are no pending recurring tasks to generate at this time.",
          variant: "default",
        });
      } else {
        toast({
          title: "Tasks Generated",
          description: `Generated ${tasks.length} new recurring tasks.`,
          variant: "default",
        });
      }
    } catch (error) {
      toast({
        title: "Error",
        description: "Failed to generate recurring tasks. Please try again.",
        variant: "destructive",
      });
    } finally {
      setIsGeneratingTasks(false);
    }
  };
  
  // Toggle task selection
  const toggleTaskSelection = (taskId: number) => {
    setGeneratedTasks(prev => 
      prev.map(task => 
        task.id === taskId 
          ? { ...task, isSelected: !task.isSelected } 
          : task
      )
    );
    
    setSelectedTaskIds(prev => {
      if (prev.includes(taskId)) {
        return prev.filter(id => id !== taskId);
      } else {
        return [...prev, taskId];
      }
    });
  };
  
  // Select all tasks
  const selectAllTasks = () => {
    setGeneratedTasks(prev => 
      prev.map(task => ({ ...task, isSelected: true }))
    );
    setSelectedTaskIds(generatedTasks.map(task => task.id));
  };
  
  // Deselect all tasks
  const deselectAllTasks = () => {
    setGeneratedTasks(prev => 
      prev.map(task => ({ ...task, isSelected: false }))
    );
    setSelectedTaskIds([]);
  };
  
  // Get client names for the tasks
  const { data: clients = [] } = useQuery({
    queryKey: ['/api/v1/clients'],
  });
  
  // Get status names for the tasks
  const { data: taskStatuses = [] } = useQuery({
    queryKey: ['/api/v1/setup/task-statuses'],
  });
  
  // Format task frequency for display
  const formatFrequency = (frequency: string | null, duration: string | null) => {
    if (!frequency) return "N/A";
    
    let formatted = frequency.charAt(0).toUpperCase() + frequency.slice(1);
    if (duration) {
      formatted += ` (${duration})`;
    }
    
    return formatted;
  };
  
  // Get client name by ID
  const getClientName = (clientId: number | null) => {
    if (!clientId) return "N/A";
    const client = clients.find((c: any) => c.id === clientId);
    return client ? client.displayName : `Client #${clientId}`;
  };
  
  // Get status name by ID
  const getStatusName = (statusId: number) => {
    const status = taskStatuses.find((s: any) => s.id === statusId);
    return status ? status.name : `Status #${statusId}`;
  };
  
  // Check if a task is overdue
  const isTaskOverdue = (task: Task) => {
    const dueDate = new Date(task.dueDate);
    const now = new Date();
    return dueDate < now;
  };
  
  // Clear the generated tasks list
  const clearGeneratedTasks = () => {
    setGeneratedTasks([]);
    setSelectedTaskIds([]);
  };
  
  return (
    <Card className="w-full">
      <CardHeader>
        <CardTitle className="flex justify-between items-center">
          <span>Auto-Generated Tasks</span>
          <Button onClick={generateTasks} disabled={isGeneratingTasks}>
            {isGeneratingTasks ? (
              <>
                <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                Generating...
              </>
            ) : (
              <>
                <RefreshCw className="mr-2 h-4 w-4" />
                Generate Tasks
              </>
            )}
          </Button>
        </CardTitle>
        <CardDescription>
          Generate and review recurring tasks based on your compliance settings
        </CardDescription>
      </CardHeader>
      
      {generatedTasks.length > 0 && (
        <>
          <CardContent>
            <div className="flex justify-between items-center mb-4">
              <div>
                <Button 
                  variant="outline" 
                  size="sm" 
                  onClick={selectAllTasks}
                  className="mr-2"
                >
                  Select All
                </Button>
                <Button 
                  variant="outline" 
                  size="sm" 
                  onClick={deselectAllTasks}
                >
                  Deselect All
                </Button>
              </div>
              <div>
                <Badge variant="outline">
                  {selectedTaskIds.length} of {generatedTasks.length} selected
                </Badge>
              </div>
            </div>
            
            <ScrollArea className="h-[400px] pr-4">
              <div className="space-y-3">
                {generatedTasks.map(task => (
                  <Card 
                    key={task.id} 
                    className={`border cursor-pointer ${
                      task.isSelected ? 'border-blue-500 bg-blue-50' : ''
                    }`}
                    onClick={() => toggleTaskSelection(task.id)}
                  >
                    <CardContent className="p-4">
                      <div className="flex justify-between items-start">
                        <div className="flex-1">
                          <div className="font-medium">{task.taskDetails || `Task #${task.id}`}</div>
                          <div className="text-sm text-muted-foreground">
                            Client: {getClientName(task.clientId)}
                          </div>
                          <div className="flex items-center mt-2 text-sm">
                            <Calendar className="mr-1 h-4 w-4" />
                            <span className="mr-2">
                              Due: {format(new Date(task.dueDate), 'MMM d, yyyy')}
                            </span>
                            {isTaskOverdue(task) && (
                              <Badge variant="destructive" className="text-xs">Overdue</Badge>
                            )}
                          </div>
                        </div>
                        <div className="ml-4">
                          <Badge variant="secondary">
                            {formatFrequency(task.complianceFrequency, task.complianceDuration)}
                          </Badge>
                        </div>
                      </div>
                    </CardContent>
                  </Card>
                ))}
              </div>
            </ScrollArea>
          </CardContent>
          
          <CardFooter className="flex justify-between">
            <Button variant="outline" onClick={clearGeneratedTasks}>
              Clear
            </Button>
            <Button disabled={selectedTaskIds.length === 0}>
              <CheckCircle className="mr-2 h-4 w-4" />
              Approve Tasks
            </Button>
          </CardFooter>
        </>
      )}
      
      {generatedTasks.length === 0 && !isGeneratingTasks && (
        <CardContent className="py-8 text-center">
          <AlertCircle className="mx-auto h-12 w-12 text-slate-300" />
          <p className="mt-2 text-slate-500">
            No auto-generated tasks available. Click "Generate Tasks" to check for new recurring tasks.
          </p>
        </CardContent>
      )}
    </Card>
  );
}