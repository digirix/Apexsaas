import { useState } from "react";
import { useQuery } from "@tanstack/react-query";
import { Task, Client, Entity, ServiceType } from "@shared/schema";
import { format } from "date-fns";
import { 
  CheckCircle,
  CalendarDays,
  Clock,
  Info,
  FileText,
  UserCircle,
  MoveRight,
  CalendarX,
  Calendar,
} from "lucide-react";

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { 
  Table, 
  TableBody, 
  TableCaption, 
  TableCell, 
  TableHead, 
  TableHeader, 
  TableRow 
} from "@/components/ui/table";
import { 
  Dialog, 
  DialogContent, 
  DialogDescription, 
  DialogFooter, 
  DialogHeader, 
  DialogTitle 
} from "@/components/ui/dialog";
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";
import { Skeleton } from "@/components/ui/skeleton";
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert";

export function AutoGeneratedTaskHistory() {
  const [selectedTask, setSelectedTask] = useState<Task | null>(null);
  const [showTaskDialog, setShowTaskDialog] = useState(false);
  
  // Fetch task history (approved tasks)
  const { 
    data: taskHistory = [], 
    isLoading,
  } = useQuery<Task[]>({
    queryKey: ["/api/v1/auto-generated-tasks/history"],
    refetchOnWindowFocus: false,
  });
  
  // Fetch clients for lookup
  const { data: clients = [] } = useQuery<Client[]>({
    queryKey: ["/api/v1/clients"],
    enabled: taskHistory.length > 0,
  });
  
  // Fetch service types for lookup
  const { data: serviceTypes = [] } = useQuery<ServiceType[]>({
    queryKey: ["/api/v1/setup/service-types"],
    enabled: taskHistory.length > 0,
  });
  
  // Fetch all entities for client lookup
  const { data: entities = [] } = useQuery<Entity[]>({
    queryKey: ["/api/v1/entities"],
    enabled: taskHistory.length > 0,
  });
  
  // Handle view task details
  const handleViewTask = (task: Task) => {
    setSelectedTask(task);
    setShowTaskDialog(true);
  };
  
  // Get client name for a task
  const getClientName = (clientId?: number) => {
    if (!clientId) return "N/A";
    const client = clients.find(c => c.id === clientId);
    return client ? client.displayName : "Unknown Client";
  };
  
  // Get entity name for a task
  const getEntityName = (entityId?: number) => {
    if (!entityId) return "N/A";
    const entity = entities.find(e => e.id === entityId);
    return entity ? entity.name : "Unknown Entity";
  };
  
  // Get service name for a task
  const getServiceName = (serviceTypeId?: number) => {
    if (!serviceTypeId) return "N/A";
    const service = serviceTypes.find(s => s.id === serviceTypeId);
    return service ? service.name : "Unknown Service";
  };

  // Format task date based on frequency
  const formatTaskPeriod = (task: Task) => {
    if (!task.complianceStartDate || !task.complianceEndDate) return "N/A";
    
    const startDate = new Date(task.complianceStartDate);
    const endDate = new Date(task.complianceEndDate);
    
    const frequency = task.complianceFrequency?.toLowerCase();
    
    if (frequency === "monthly") {
      return format(startDate, "MMMM yyyy");
    } else if (frequency === "quarterly") {
      const quarter = Math.floor(startDate.getMonth() / 3) + 1;
      return `Q${quarter} ${startDate.getFullYear()}`;
    } else if (frequency === "annual" || frequency === "yearly") {
      return `${startDate.getFullYear()}`;
    } else {
      return `${format(startDate, "MMM d, yyyy")} - ${format(endDate, "MMM d, yyyy")}`;
    }
  };

  // Format task date for display
  const formatDate = (date?: Date | string | null) => {
    if (!date) return "N/A";
    return format(new Date(date), "MMM d, yyyy");
  };
  
  return (
    <div className="space-y-6">
      {/* Header */}
      <div className="flex flex-col sm:flex-row sm:justify-between sm:items-center gap-4">
        <div>
          <h1 className="text-xl font-semibold">Task History</h1>
          <p className="text-sm text-muted-foreground">
            View previously approved recurring tasks
          </p>
        </div>
      </div>
      
      {/* Task history table */}
      {isLoading ? (
        <div className="space-y-4">
          <Skeleton className="h-8 w-full" />
          <Skeleton className="h-12 w-full" />
          <Skeleton className="h-12 w-full" />
          <Skeleton className="h-12 w-full" />
        </div>
      ) : taskHistory.length === 0 ? (
        <Card>
          <CardContent className="pt-6 flex flex-col items-center justify-center h-48">
            <CalendarX className="h-12 w-12 text-muted-foreground mb-4" />
            <p className="text-lg font-medium mb-2">No task history</p>
            <p className="text-sm text-muted-foreground text-center max-w-md">
              There are no approved auto-generated tasks in the history.
              Once you approve tasks, they will appear here.
            </p>
          </CardContent>
        </Card>
      ) : (
        <Card>
          <CardHeader className="pb-1">
            <CardTitle className="text-lg">Task History</CardTitle>
            <CardDescription>
              {taskHistory.length} approved task{taskHistory.length !== 1 && 's'} in history
            </CardDescription>
          </CardHeader>
          <CardContent>
            <Table>
              <TableHeader>
                <TableRow>
                  <TableHead>Task Details</TableHead>
                  <TableHead>Client / Entity</TableHead>
                  <TableHead>Service</TableHead>
                  <TableHead>Compliance Period</TableHead>
                  <TableHead>Approval Date</TableHead>
                </TableRow>
              </TableHeader>
              <TableBody>
                {taskHistory.map((task) => (
                  <TableRow key={task.id} className="cursor-pointer hover:bg-muted/50" onClick={() => handleViewTask(task)}>
                    <TableCell className="font-medium">
                      {task.taskDetails || `Task #${task.id}`}
                    </TableCell>
                    <TableCell>
                      {task.clientId ? (
                        <div>
                          <div>{getClientName(task.clientId)}</div>
                          {task.entityId && (
                            <div className="text-xs text-muted-foreground flex items-center">
                              <MoveRight className="h-3 w-3 mr-1" />
                              {getEntityName(task.entityId)}
                            </div>
                          )}
                        </div>
                      ) : (
                        "N/A"
                      )}
                    </TableCell>
                    <TableCell>
                      {task.serviceTypeId ? (
                        getServiceName(task.serviceTypeId)
                      ) : (
                        "N/A"
                      )}
                    </TableCell>
                    <TableCell>
                      <div className="flex items-center">
                        <Calendar className="h-4 w-4 mr-2 text-muted-foreground" />
                        {formatTaskPeriod(task)}
                      </div>
                    </TableCell>
                    <TableCell>
                      <div className="flex items-center">
                        <CheckCircle className="h-4 w-4 mr-2 text-green-500" />
                        {task.updatedAt ? format(new Date(task.updatedAt), "MMM d, yyyy") : format(new Date(task.createdAt), "MMM d, yyyy")}
                      </div>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </CardContent>
        </Card>
      )}
      
      {/* Task details dialog */}
      <Dialog open={showTaskDialog} onOpenChange={setShowTaskDialog}>
        {selectedTask && (
          <DialogContent className="max-w-2xl">
            <DialogHeader>
              <DialogTitle>Task Details</DialogTitle>
              <DialogDescription>
                View details for this approved task
              </DialogDescription>
            </DialogHeader>
            
            <div className="grid gap-4 py-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <h3 className="font-medium text-sm text-muted-foreground mb-1">Task Description</h3>
                  <p className="text-base">{selectedTask.taskDetails || `Task #${selectedTask.id}`}</p>
                </div>
                
                <div>
                  <h3 className="font-medium text-sm text-muted-foreground mb-1">Compliance Period</h3>
                  <p className="text-base flex items-center">
                    <Calendar className="h-4 w-4 mr-2 text-muted-foreground" />
                    {formatTaskPeriod(selectedTask)}
                  </p>
                </div>
                
                <div>
                  <h3 className="font-medium text-sm text-muted-foreground mb-1">Client</h3>
                  <p className="text-base">{selectedTask.clientId ? getClientName(selectedTask.clientId) : "N/A"}</p>
                </div>
                
                <div>
                  <h3 className="font-medium text-sm text-muted-foreground mb-1">Entity</h3>
                  <p className="text-base">{selectedTask.entityId ? getEntityName(selectedTask.entityId) : "N/A"}</p>
                </div>
                
                <div>
                  <h3 className="font-medium text-sm text-muted-foreground mb-1">Service</h3>
                  <p className="text-base">{selectedTask.serviceTypeId ? getServiceName(selectedTask.serviceTypeId) : "N/A"}</p>
                </div>
                
                <div>
                  <h3 className="font-medium text-sm text-muted-foreground mb-1">Due Date</h3>
                  <p className="text-base flex items-center">
                    <Clock className="h-4 w-4 mr-2 text-muted-foreground" />
                    {selectedTask.dueDate ? format(new Date(selectedTask.dueDate), "MMM d, yyyy") : "N/A"}
                  </p>
                </div>
                
                <div>
                  <h3 className="font-medium text-sm text-muted-foreground mb-1">Task Type</h3>
                  <p className="text-base">
                    <Badge variant="outline" className={selectedTask.isAdmin ? "bg-blue-50" : "bg-green-50"}>
                      {selectedTask.isAdmin ? "Admin" : "Revenue"} - {selectedTask.taskType}
                    </Badge>
                  </p>
                </div>
                
                <div>
                  <h3 className="font-medium text-sm text-muted-foreground mb-1">Frequency</h3>
                  <p className="text-base">
                    <Badge variant="outline">
                      {selectedTask.complianceFrequency || "One Time"}
                    </Badge>
                  </p>
                </div>
                
                {selectedTask.parentTaskId && (
                  <div className="col-span-2">
                    <h3 className="font-medium text-sm text-muted-foreground mb-1">Original Task ID</h3>
                    <p className="text-base">#{selectedTask.parentTaskId}</p>
                  </div>
                )}
                
                {selectedTask.nextToDo && (
                  <div className="col-span-2">
                    <h3 className="font-medium text-sm text-muted-foreground mb-1">Next Steps</h3>
                    <p className="text-base whitespace-pre-wrap">{selectedTask.nextToDo}</p>
                  </div>
                )}
              </div>
            </div>
            
            <DialogFooter>
              <div className="w-full flex justify-between items-center">
                <div className="text-sm text-muted-foreground">
                  <span className="font-semibold">Approval Date:</span> {selectedTask.updatedAt ? format(new Date(selectedTask.updatedAt), "MMM d, yyyy") : format(new Date(selectedTask.createdAt), "MMM d, yyyy")}
                </div>
              </div>
            </DialogFooter>
          </DialogContent>
        )}
      </Dialog>
    </div>
  );
}